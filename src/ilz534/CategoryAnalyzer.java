package ilz534;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CategoryAnalyzer.java
 * 
 * Analyzes the categories generated by out predictions using lucene indexing
 * and our review generated queries against actual category values for the
 * testing set
 * 
 * @author drusc0
 *
 */
public class CategoryAnalyzer {

	private BufferedReader br;
	private int truePositive;
	private int falsePositive;
	private Connector con;

	/**
	 * CategoryAnalyze - constructor
	 * 
	 * @param doc
	 */
	public CategoryAnalyzer(String doc) {
		this.truePositive = 0;
		this.falsePositive = 0;
		this.con = new Connector();

		try {
			this.br = new BufferedReader(new FileReader(doc));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * setReader opens a new document analyzer and sets values to 0
	 * 
	 * @param path
	 * @throws IOException
	 */
	public void setReader(String path) throws IOException {
		this.falsePositive = 0;
		this.truePositive = 0;
		try {
			this.br = new BufferedReader(new FileReader(path));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * generateCategories queries mongodb for categories for given business
	 * 
	 * @param docID
	 * @return categoryList
	 */
	public List<String> generateCategories(String docID) {
		List<String> categoriesList = this.con.getCategory(docID);
		return categoriesList;
	}

	/**
	 * analyze performs an analysis on the document generated during search and
	 * the actual categories for the testing set
	 * 
	 * @throws Exception
	 */
	public void analyze() throws Exception {
		String line = "";
		Map<String, List<String>> map = new HashMap<String, List<String>>();
		try {
			String id = "";
			while ((line = this.br.readLine()) != null) {

				if (line.contains("<ID>")) {
					// remove tags
					line = line.replaceFirst("<ID>", "");
					line = line.replaceFirst("</ID>", "");
					id = line;
				} else if (line.contains("<Categories>")) {
					this.br.readLine();
					List<String> lst = new ArrayList<String>();
					for (int i = 0; i < 5; i++) {
						line = br.readLine();
						line = line.split("=")[0];
						lst.add(line);
					}
					map.put(id, lst);
				}
			}

			checkValidity(map);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			this.br.close();
		}

	}

	/**
	 * checkValidity checks the categories of the business and if at least one
	 * category matches, we give increase the hits value
	 * 
	 * @param map
	 */
	public void checkValidity(Map<String, List<String>> map) {

		for (String key : map.keySet()) {
			List<String> categories = this.generateCategories(key);

			if (checkCategories(key, map.get(key), categories)) {
				this.truePositive++;
			} else {
				this.falsePositive++;
			}

		}
	}

	/**
	 * checkCategories checks the list of categories in the against the actual
	 * categories
	 * 
	 * @param businessID
	 * @return flag
	 */
	public boolean checkCategories(String businessID, List<String> topLabels,
			List<String> categories) {
		boolean flag = false;

		for (String label : topLabels) {
			for (String category : categories) {
				if (category.equals(label)) {
					flag = true;
				}
			}
		}
		System.out.println(businessID);
		System.out.println("labels:\t\t" + topLabels);
		System.out.println("categories:\t\t" + categories);
		return flag;
	}

	/**
	 * getTruePositive returns the number of positive hits from the total test
	 * set
	 * 
	 * @return truePositive
	 */
	public int getTruePositive() {
		return truePositive;
	}

	/**
	 * getFalsePositive returns the number of documents that were not a match
	 * but were fetch by lucene as a match
	 * 
	 * @return falsePositive
	 */
	public int getFalsePositive() {
		return falsePositive;
	}

	// MAIN for testing
	public static void main(String[] args) throws IOException {
		Connector con = new Connector();
		String top10ReviewHits = "/top10reviewhitsnew.txt";
		String path = System.getProperty("user.home");
		FileInputStream is = new FileInputStream(path + top10ReviewHits);
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);

		try {
			int count = 0;
			String line = "";
			while ((line = br.readLine()) != null) {
				if (line.contains("<ID>")) {
					count++;
				}
			}

			System.out.println("There are "
					+ con.getBusinessTestingSet().size()
					+ " entries for testing\n");
			System.out.println("There are " + count + " entries in the file\n");

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			br.close();
			isr.close();
			is.close();
		}
	}
}
